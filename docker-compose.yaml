services:
  api:
    build:
      context: .
      dockerfile: docker/api/Dockerfile
    ports:
      - "5000:5000"
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_started  # Changed from service_healthy
    volumes:
      - .:/app
    networks:
      - app-network

  worker:
    build:
      context: .
      dockerfile: docker/worker/Dockerfile
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      redis:
        condition: service_healthy
      mongodb:
        condition: service_started
    #volumes:
      #- .:/app
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "worker.celery_app.celery", "inspect", "ping", "-Q", "youtube_tasks"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  mongodb:
    image: mongo:4.4
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - app-network
    # Using simpler healthcheck for Mongo 4.4
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
    # Add command to enable authentication if needed
    command: mongod --bind_ip_all

networks:
  app-network:
    driver: bridge

volumes:
  mongodb_data: